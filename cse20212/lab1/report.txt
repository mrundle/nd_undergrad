// Matt Rundle
// cse20212.01
// lab1 Report

	In this lab we were instructed to make a Connect 4 game. From the user's perspective, it is fairly simple to use. When the program begins, it asks you whether you want to play with a friend or against the computer. After you choose, the Connect 4 board is displayed and the users are prompted to input which column they'd like to drop their piece into. If one of the players connects four of their pieces in a row, the program announces that they have won, and asks them if they'd like to play again. From here they can either quit or play again.
	From the programmer's perspective, the program ultimately consists of six files: the Makefile, C4Col.h, C4Col.cpp, C4Board.h, C4Board.cpp, and main.cpp. The Makefile provides instructions to the shell for how to combine the different files and compile the program. C4Col.h lays out the C4Col class, which includes three private data members (two integers storing the current number of discs and the maximum number of discs, and one pointer to a dynamically allocated char array representing the discs) as well as 7 public functions. Two of these functions are the constructor and destructor for the object, and the others include isFull(), addDisc(), getDisc(), getMaxDiscs(), and getNumDiscs(). addDisc() is the only function to actually manipulate the data set; the rest provide information. These functions are implemented in C4Col.cpp.
	C4Board.h sets up the C4Board class, which contains 2 private data members (including an integer representing the number of board columns, and a pointer to a dynamically allocated array of C4Col objects), 5 private helper functions, and 4 public functions. Two of these public functions are the constructor and destructor; the other two includes display() which displays the contents of the board, and play() which ends up actually running the Connect 4 game and taking input from the user. These functions are implemented in C4Board.cpp. One interesting feature is that the user can play against the computer. The AI behind the computer player is very simple - it merely loops through the columns looking for an adjacent move, and picks a column randomly if no adjacent move exists.
	Finally, main.cpp is the file containing the main function that lays the overarching structure for the game. It consists of a large loop that initiates the C4Board::play() function (which then plays the game), and also contains some user controls for playing again, or quitting, after the game has ended.
	To test the programs functionality, I ran through it multiple times and tried many different combinations of moves, including 'illegal' moves. I also made sure that all different combinations of "wins" were able to be recognized by the program, including vertical, horizontal, and diagonal connections. 
